<?php

namespace App\Tests;


use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;
use App\Entity\User;
use Symfony\Contracts\HttpClient\Exception\ClientExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\DecodingExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\RedirectionExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\ServerExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface;

class UserControllerTest extends ApiTestCase
{
    public function test_Index_succes(): void
    {
        try {
            static::createClient()->request('GET', 'api/users');
        } catch (TransportExceptionInterface $e) {
        }

        self::assertResponseIsSuccessful();
        self::assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');
    }

    public function test_Index_failed(): void
    {
        try {
            static::createClient()->request('GET', 'api/user');
        } catch (TransportExceptionInterface $e) {
        }

        self::assertResponseHeaderNotSame('content-type', 'application/ld+json; charset=utf-8');
    }

    public function test_new_succes()
    {
        $data['json'] = [
            'firstname' => 'toto',
            'lastname' => 'toto',
            'datecreate' => '2019-12-12T22:10:31+00:00',
            'updatedate' => '2019-12-12T22:10:31+00:00'
        ];
        try {
            static::createClient()->request('POST', 'api/user', $data);
        } catch (TransportExceptionInterface $e) {
        }

        self::assertResponseHeaderNotSame('content-type', 'application/ld+json; charset=utf-8');
    }

    public function test_delete_succes()
    {
        try {
            static::createClient()->request('DELETE', 'api/users/2');
        } catch (TransportExceptionInterface $e) {
        }

        self::assertResponseStatusCodeSame(204, '');
    }

    public function testUpdateUser(): void
    {
        $client = static::createClient();
        // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
        // ISBN 9786644879585 has been generated by Alice when loading test fixtures.
        // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
        $iri = $this->findIriBy(User::class, ['id' => '1']);

        try {
            $client->request('PUT', $iri, ['json' => [
                'lastname' => 'updated lastname',
            ]]);
        } catch (TransportExceptionInterface $e) {
        }

        self::assertResponseIsSuccessful();
    }
}
